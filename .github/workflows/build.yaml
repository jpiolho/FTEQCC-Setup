name: Compare zips and build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'


permissions: 
  contents: write
  
env:
  URL_CONSOLE_ZIP: https://www.fteqcc.org/dl/fteqcc_win64.zip
  URL_GUI_ZIP: https://www.fteqcc.org/dl/fteqccgui_win64.zip
  URL_FTEQCC: https://www.fteqcc.org/

jobs:
  download-compare-and-build:
    runs-on: windows-2019
    env:
      CONSOLE_ZIP: FTEQCC/files/temp/console.zip
      GUI_ZIP: FTEQCC/files/temp/gui.zip
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Fetch build date from website and get setup version
      shell: pwsh
      run: |
        $buildInfo = Invoke-WebRequest -Uri $env:URL_FTEQCC | Select-String -Pattern "Built: .* UTC \d{4}"
        if ($buildInfo) {
          $currentBuildDate = $buildInfo.Matches.Value -replace "Built: ", ""
        } else {
          Write-Output "Unable to fetch build date."
          exit 1
        }

        Write-Output "FTEQCC build date: $currentBuildDate"
        
        $repoPath = "$env:GITHUB_WORKSPACE"
        $lastBuildDateFile = "$repoPath/last_build_date.txt"

        if (Test-Path $lastBuildDateFile) {
          $lastBuildDate = Get-Content $lastBuildDateFile
          if ($currentBuildDate -eq $lastBuildDate) {
            Write-Output "Build dates match. No need to build. Canceling the workflow."
            exit 0
          } else {
            Write-Output "Build dates do not match. Continuing the workflow."
          }
        } else {
          Write-Output "First time running, no build date to compare. Continuing with the workflow."
        }

        Set-Content -Path $lastBuildDateFile -Value $currentBuildDate

        # Generate the setup version
        $dateTime = [DateTime]::ParseExact($currentBuildDate, "ddd MMM dd HH:mm:ss UTC yyyy", [System.Globalization.CultureInfo]::InvariantCulture)
        $year = $dateTime.Year % 100
        $month = $dateTime.Month
        $day = $dateTime.Day
        
        $version = "{0:D2}.{1:D2}.{2:D2}" -f $year, $month, $day
        Write-Output "SETUP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "Setup version: $version"
        
    - name: Create temporary directories
      shell: pwsh
      run: |
        [System.IO.Directory]::CreateDirectory([System.IO.Path]::GetDirectoryName($env:CONSOLE_ZIP))
        [System.IO.Directory]::CreateDirectory([System.IO.Path]::GetDirectoryName($env:GUI_ZIP))
        
    - name: Download FTEQCC zip files
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri $env:URL_CONSOLE_ZIP -OutFile $env:CONSOLE_ZIP
        Invoke-WebRequest -Uri $env:URL_GUI_ZIP -OutFile $env:GUI_ZIP

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2.0.0
      
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Restore NuGet packages
      run: nuget restore

    - name: Build with MSBuild
      run: msbuild /p:Configuration=Release

    - name: Rename setup file
      shell: pwsh
      run: |
        $setupFileName = "FTEQCC_win_x64.msi";
        Rename-Item -Path FTEQCC/FTEQCC.msi -NewName $setupFileName
        Write-Output "SETUP_FILENAME=$setupFileName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Commit updated build date
      shell: pwsh
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add last_build_date.txt
        git commit -m "Update build date"
        git push

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.SETUP_VERSION }}
        name: Release v${{ env.SETUP_VERSION }}
        files: FTEQCC/${{ env.SETUP_FILENAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
